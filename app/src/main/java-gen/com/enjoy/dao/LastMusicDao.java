package com.enjoy.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.enjoy.entity.LastMusic;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LAST_MUSIC".
*/
public class LastMusicDao extends AbstractDao<LastMusic, Long> {

    public static final String TABLENAME = "LAST_MUSIC";

    /**
     * Properties of entity LastMusic.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Special_type = new Property(1, Integer.class, "special_type", false, "SPECIAL_TYPE");
        public final static Property Pic_huge = new Property(2, String.class, "pic_huge", false, "PIC_HUGE");
        public final static Property Resource_type = new Property(3, String.class, "resource_type", false, "RESOURCE_TYPE");
        public final static Property Pic_premium = new Property(4, String.class, "pic_premium", false, "PIC_PREMIUM");
        public final static Property Havehigh = new Property(5, Integer.class, "havehigh", false, "HAVEHIGH");
        public final static Property Author = new Property(6, String.class, "author", false, "AUTHOR");
        public final static Property Toneid = new Property(7, String.class, "toneid", false, "TONEID");
        public final static Property Has_mv = new Property(8, Integer.class, "has_mv", false, "HAS_MV");
        public final static Property Song_id = new Property(9, String.class, "song_id", false, "SONG_ID");
        public final static Property Piao_id = new Property(10, String.class, "piao_id", false, "PIAO_ID");
        public final static Property Artist_id = new Property(11, String.class, "artist_id", false, "ARTIST_ID");
        public final static Property Lrclink = new Property(12, String.class, "lrclink", false, "LRCLINK");
        public final static Property Relate_status = new Property(13, String.class, "relate_status", false, "RELATE_STATUS");
        public final static Property Learn = new Property(14, Integer.class, "learn", false, "LEARN");
        public final static Property Pic_big = new Property(15, String.class, "pic_big", false, "PIC_BIG");
        public final static Property Play_type = new Property(16, Integer.class, "play_type", false, "PLAY_TYPE");
        public final static Property Album_id = new Property(17, String.class, "album_id", false, "ALBUM_ID");
        public final static Property Album_title = new Property(18, String.class, "album_title", false, "ALBUM_TITLE");
        public final static Property Bitrate_fee = new Property(19, String.class, "bitrate_fee", false, "BITRATE_FEE");
        public final static Property Song_source = new Property(20, String.class, "song_source", false, "SONG_SOURCE");
        public final static Property All_artist_id = new Property(21, String.class, "all_artist_id", false, "ALL_ARTIST_ID");
        public final static Property All_artist_ting_uid = new Property(22, String.class, "all_artist_ting_uid", false, "ALL_ARTIST_TING_UID");
        public final static Property All_rate = new Property(23, String.class, "all_rate", false, "ALL_RATE");
        public final static Property Charge = new Property(24, Integer.class, "charge", false, "CHARGE");
        public final static Property Copy_type = new Property(25, String.class, "copy_type", false, "COPY_TYPE");
        public final static Property Is_first_publish = new Property(26, Integer.class, "is_first_publish", false, "IS_FIRST_PUBLISH");
        public final static Property Korean_bb_song = new Property(27, String.class, "korean_bb_song", false, "KOREAN_BB_SONG");
        public final static Property Pic_radio = new Property(28, String.class, "pic_radio", false, "PIC_RADIO");
        public final static Property Has_mv_mobile = new Property(29, Integer.class, "has_mv_mobile", false, "HAS_MV_MOBILE");
        public final static Property Title = new Property(30, String.class, "title", false, "TITLE");
        public final static Property Pic_small = new Property(31, String.class, "pic_small", false, "PIC_SMALL");
        public final static Property Album_no = new Property(32, String.class, "album_no", false, "ALBUM_NO");
        public final static Property Resource_type_ext = new Property(33, String.class, "resource_type_ext", false, "RESOURCE_TYPE_EXT");
        public final static Property Ting_uid = new Property(34, String.class, "ting_uid", false, "TING_UID");
    }


    public LastMusicDao(DaoConfig config) {
        super(config);
    }
    
    public LastMusicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LAST_MUSIC\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SPECIAL_TYPE\" INTEGER," + // 1: special_type
                "\"PIC_HUGE\" TEXT," + // 2: pic_huge
                "\"RESOURCE_TYPE\" TEXT," + // 3: resource_type
                "\"PIC_PREMIUM\" TEXT," + // 4: pic_premium
                "\"HAVEHIGH\" INTEGER," + // 5: havehigh
                "\"AUTHOR\" TEXT," + // 6: author
                "\"TONEID\" TEXT," + // 7: toneid
                "\"HAS_MV\" INTEGER," + // 8: has_mv
                "\"SONG_ID\" TEXT," + // 9: song_id
                "\"PIAO_ID\" TEXT," + // 10: piao_id
                "\"ARTIST_ID\" TEXT," + // 11: artist_id
                "\"LRCLINK\" TEXT," + // 12: lrclink
                "\"RELATE_STATUS\" TEXT," + // 13: relate_status
                "\"LEARN\" INTEGER," + // 14: learn
                "\"PIC_BIG\" TEXT," + // 15: pic_big
                "\"PLAY_TYPE\" INTEGER," + // 16: play_type
                "\"ALBUM_ID\" TEXT," + // 17: album_id
                "\"ALBUM_TITLE\" TEXT," + // 18: album_title
                "\"BITRATE_FEE\" TEXT," + // 19: bitrate_fee
                "\"SONG_SOURCE\" TEXT," + // 20: song_source
                "\"ALL_ARTIST_ID\" TEXT," + // 21: all_artist_id
                "\"ALL_ARTIST_TING_UID\" TEXT," + // 22: all_artist_ting_uid
                "\"ALL_RATE\" TEXT," + // 23: all_rate
                "\"CHARGE\" INTEGER," + // 24: charge
                "\"COPY_TYPE\" TEXT," + // 25: copy_type
                "\"IS_FIRST_PUBLISH\" INTEGER," + // 26: is_first_publish
                "\"KOREAN_BB_SONG\" TEXT," + // 27: korean_bb_song
                "\"PIC_RADIO\" TEXT," + // 28: pic_radio
                "\"HAS_MV_MOBILE\" INTEGER," + // 29: has_mv_mobile
                "\"TITLE\" TEXT," + // 30: title
                "\"PIC_SMALL\" TEXT," + // 31: pic_small
                "\"ALBUM_NO\" TEXT," + // 32: album_no
                "\"RESOURCE_TYPE_EXT\" TEXT," + // 33: resource_type_ext
                "\"TING_UID\" TEXT);"); // 34: ting_uid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LAST_MUSIC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LastMusic entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer special_type = entity.getSpecial_type();
        if (special_type != null) {
            stmt.bindLong(2, special_type);
        }
 
        String pic_huge = entity.getPic_huge();
        if (pic_huge != null) {
            stmt.bindString(3, pic_huge);
        }
 
        String resource_type = entity.getResource_type();
        if (resource_type != null) {
            stmt.bindString(4, resource_type);
        }
 
        String pic_premium = entity.getPic_premium();
        if (pic_premium != null) {
            stmt.bindString(5, pic_premium);
        }
 
        Integer havehigh = entity.getHavehigh();
        if (havehigh != null) {
            stmt.bindLong(6, havehigh);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(7, author);
        }
 
        String toneid = entity.getToneid();
        if (toneid != null) {
            stmt.bindString(8, toneid);
        }
 
        Integer has_mv = entity.getHas_mv();
        if (has_mv != null) {
            stmt.bindLong(9, has_mv);
        }
 
        String song_id = entity.getSong_id();
        if (song_id != null) {
            stmt.bindString(10, song_id);
        }
 
        String piao_id = entity.getPiao_id();
        if (piao_id != null) {
            stmt.bindString(11, piao_id);
        }
 
        String artist_id = entity.getArtist_id();
        if (artist_id != null) {
            stmt.bindString(12, artist_id);
        }
 
        String lrclink = entity.getLrclink();
        if (lrclink != null) {
            stmt.bindString(13, lrclink);
        }
 
        String relate_status = entity.getRelate_status();
        if (relate_status != null) {
            stmt.bindString(14, relate_status);
        }
 
        Integer learn = entity.getLearn();
        if (learn != null) {
            stmt.bindLong(15, learn);
        }
 
        String pic_big = entity.getPic_big();
        if (pic_big != null) {
            stmt.bindString(16, pic_big);
        }
 
        Integer play_type = entity.getPlay_type();
        if (play_type != null) {
            stmt.bindLong(17, play_type);
        }
 
        String album_id = entity.getAlbum_id();
        if (album_id != null) {
            stmt.bindString(18, album_id);
        }
 
        String album_title = entity.getAlbum_title();
        if (album_title != null) {
            stmt.bindString(19, album_title);
        }
 
        String bitrate_fee = entity.getBitrate_fee();
        if (bitrate_fee != null) {
            stmt.bindString(20, bitrate_fee);
        }
 
        String song_source = entity.getSong_source();
        if (song_source != null) {
            stmt.bindString(21, song_source);
        }
 
        String all_artist_id = entity.getAll_artist_id();
        if (all_artist_id != null) {
            stmt.bindString(22, all_artist_id);
        }
 
        String all_artist_ting_uid = entity.getAll_artist_ting_uid();
        if (all_artist_ting_uid != null) {
            stmt.bindString(23, all_artist_ting_uid);
        }
 
        String all_rate = entity.getAll_rate();
        if (all_rate != null) {
            stmt.bindString(24, all_rate);
        }
 
        Integer charge = entity.getCharge();
        if (charge != null) {
            stmt.bindLong(25, charge);
        }
 
        String copy_type = entity.getCopy_type();
        if (copy_type != null) {
            stmt.bindString(26, copy_type);
        }
 
        Integer is_first_publish = entity.getIs_first_publish();
        if (is_first_publish != null) {
            stmt.bindLong(27, is_first_publish);
        }
 
        String korean_bb_song = entity.getKorean_bb_song();
        if (korean_bb_song != null) {
            stmt.bindString(28, korean_bb_song);
        }
 
        String pic_radio = entity.getPic_radio();
        if (pic_radio != null) {
            stmt.bindString(29, pic_radio);
        }
 
        Integer has_mv_mobile = entity.getHas_mv_mobile();
        if (has_mv_mobile != null) {
            stmt.bindLong(30, has_mv_mobile);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(31, title);
        }
 
        String pic_small = entity.getPic_small();
        if (pic_small != null) {
            stmt.bindString(32, pic_small);
        }
 
        String album_no = entity.getAlbum_no();
        if (album_no != null) {
            stmt.bindString(33, album_no);
        }
 
        String resource_type_ext = entity.getResource_type_ext();
        if (resource_type_ext != null) {
            stmt.bindString(34, resource_type_ext);
        }
 
        String ting_uid = entity.getTing_uid();
        if (ting_uid != null) {
            stmt.bindString(35, ting_uid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LastMusic entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer special_type = entity.getSpecial_type();
        if (special_type != null) {
            stmt.bindLong(2, special_type);
        }
 
        String pic_huge = entity.getPic_huge();
        if (pic_huge != null) {
            stmt.bindString(3, pic_huge);
        }
 
        String resource_type = entity.getResource_type();
        if (resource_type != null) {
            stmt.bindString(4, resource_type);
        }
 
        String pic_premium = entity.getPic_premium();
        if (pic_premium != null) {
            stmt.bindString(5, pic_premium);
        }
 
        Integer havehigh = entity.getHavehigh();
        if (havehigh != null) {
            stmt.bindLong(6, havehigh);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(7, author);
        }
 
        String toneid = entity.getToneid();
        if (toneid != null) {
            stmt.bindString(8, toneid);
        }
 
        Integer has_mv = entity.getHas_mv();
        if (has_mv != null) {
            stmt.bindLong(9, has_mv);
        }
 
        String song_id = entity.getSong_id();
        if (song_id != null) {
            stmt.bindString(10, song_id);
        }
 
        String piao_id = entity.getPiao_id();
        if (piao_id != null) {
            stmt.bindString(11, piao_id);
        }
 
        String artist_id = entity.getArtist_id();
        if (artist_id != null) {
            stmt.bindString(12, artist_id);
        }
 
        String lrclink = entity.getLrclink();
        if (lrclink != null) {
            stmt.bindString(13, lrclink);
        }
 
        String relate_status = entity.getRelate_status();
        if (relate_status != null) {
            stmt.bindString(14, relate_status);
        }
 
        Integer learn = entity.getLearn();
        if (learn != null) {
            stmt.bindLong(15, learn);
        }
 
        String pic_big = entity.getPic_big();
        if (pic_big != null) {
            stmt.bindString(16, pic_big);
        }
 
        Integer play_type = entity.getPlay_type();
        if (play_type != null) {
            stmt.bindLong(17, play_type);
        }
 
        String album_id = entity.getAlbum_id();
        if (album_id != null) {
            stmt.bindString(18, album_id);
        }
 
        String album_title = entity.getAlbum_title();
        if (album_title != null) {
            stmt.bindString(19, album_title);
        }
 
        String bitrate_fee = entity.getBitrate_fee();
        if (bitrate_fee != null) {
            stmt.bindString(20, bitrate_fee);
        }
 
        String song_source = entity.getSong_source();
        if (song_source != null) {
            stmt.bindString(21, song_source);
        }
 
        String all_artist_id = entity.getAll_artist_id();
        if (all_artist_id != null) {
            stmt.bindString(22, all_artist_id);
        }
 
        String all_artist_ting_uid = entity.getAll_artist_ting_uid();
        if (all_artist_ting_uid != null) {
            stmt.bindString(23, all_artist_ting_uid);
        }
 
        String all_rate = entity.getAll_rate();
        if (all_rate != null) {
            stmt.bindString(24, all_rate);
        }
 
        Integer charge = entity.getCharge();
        if (charge != null) {
            stmt.bindLong(25, charge);
        }
 
        String copy_type = entity.getCopy_type();
        if (copy_type != null) {
            stmt.bindString(26, copy_type);
        }
 
        Integer is_first_publish = entity.getIs_first_publish();
        if (is_first_publish != null) {
            stmt.bindLong(27, is_first_publish);
        }
 
        String korean_bb_song = entity.getKorean_bb_song();
        if (korean_bb_song != null) {
            stmt.bindString(28, korean_bb_song);
        }
 
        String pic_radio = entity.getPic_radio();
        if (pic_radio != null) {
            stmt.bindString(29, pic_radio);
        }
 
        Integer has_mv_mobile = entity.getHas_mv_mobile();
        if (has_mv_mobile != null) {
            stmt.bindLong(30, has_mv_mobile);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(31, title);
        }
 
        String pic_small = entity.getPic_small();
        if (pic_small != null) {
            stmt.bindString(32, pic_small);
        }
 
        String album_no = entity.getAlbum_no();
        if (album_no != null) {
            stmt.bindString(33, album_no);
        }
 
        String resource_type_ext = entity.getResource_type_ext();
        if (resource_type_ext != null) {
            stmt.bindString(34, resource_type_ext);
        }
 
        String ting_uid = entity.getTing_uid();
        if (ting_uid != null) {
            stmt.bindString(35, ting_uid);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LastMusic readEntity(Cursor cursor, int offset) {
        LastMusic entity = new LastMusic( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // special_type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pic_huge
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // resource_type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pic_premium
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // havehigh
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // author
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // toneid
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // has_mv
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // song_id
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // piao_id
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // artist_id
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // lrclink
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // relate_status
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // learn
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // pic_big
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // play_type
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // album_id
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // album_title
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // bitrate_fee
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // song_source
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // all_artist_id
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // all_artist_ting_uid
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // all_rate
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // charge
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // copy_type
            cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26), // is_first_publish
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // korean_bb_song
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // pic_radio
            cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29), // has_mv_mobile
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // title
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // pic_small
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // album_no
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // resource_type_ext
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34) // ting_uid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LastMusic entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSpecial_type(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setPic_huge(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setResource_type(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPic_premium(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHavehigh(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setAuthor(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setToneid(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHas_mv(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setSong_id(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPiao_id(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setArtist_id(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLrclink(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRelate_status(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setLearn(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setPic_big(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPlay_type(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setAlbum_id(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setAlbum_title(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setBitrate_fee(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setSong_source(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setAll_artist_id(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setAll_artist_ting_uid(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setAll_rate(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setCharge(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setCopy_type(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setIs_first_publish(cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26));
        entity.setKorean_bb_song(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setPic_radio(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setHas_mv_mobile(cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29));
        entity.setTitle(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setPic_small(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setAlbum_no(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setResource_type_ext(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setTing_uid(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LastMusic entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LastMusic entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LastMusic entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
